import os
import pandas as pd
import numpy as np
import requests

# --------------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ---------------
DATA_DIR = "data/"  # –ü–∞–ø–∫–∞ —Å CSV –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
FILES = ["GOLD.csv", "EQMX.csv", "OBLG.csv", "LQDT.csv"]
ASSETS = ["GOLD", "EQMX", "OBLG", "LQDT"]
MULTIPLIERS = [0.025, 1, 1, 100]  # GOLD –≤ USD ‚Üí RUB, LQDT –≤ –∫–æ–ø–µ–π–∫–∞—Ö ‚Üí —Ä—É–±–ª–∏
LOOKBACK = 126  # ~6 –º–µ—Å—è—Ü–µ–≤ (—Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π)

# --- Telegram (—á–µ—Ä–µ–∑ GitHub Secrets) ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TELEGRAM_ENABLED = bool(BOT_TOKEN and CHAT_ID)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_and_prepare_data():
    dfs = {}
    for i, (file, asset) in enumerate(zip(FILES, ASSETS)):
        path = os.path.join(DATA_DIR, file)
        if not os.path.exists(path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        df = pd.read_csv(path)

        df['Date'] = pd.to_datetime(df['TRADEDATE'], errors='coerce')
        df = df.drop(columns=['TRADEDATE'])
        df = df.sort_values('Date').reset_index(drop=True)

        for col in ['OPEN', 'HIGH', 'LOW', 'CLOSE', 'VOLUME']:
            if col in df.columns:
                df[col] = (
                    df[col].astype(str)
                    .str.replace(' ', '', regex=False)
                    .str.replace(',', '.', regex=False)
                    .replace(['', '-', 'nan', 'None'], np.nan)
                )
                df[col] = pd.to_numeric(df[col], errors='coerce')
                if col in ['OPEN', 'HIGH', 'LOW', 'CLOSE']:
                    df[col] = df[col] * MULTIPLIERS[i]
                df.rename(columns={col: f"{col.capitalize()}_{asset}"}, inplace=True)

        dfs[asset] = df[['Date'] + [c for c in df.columns if c != 'Date']]

    df_merged = dfs[ASSETS[0]][['Date']].copy()
    for asset in ASSETS:
        df_merged = df_merged.merge(dfs[asset], on='Date', how='inner')

    df_merged = df_merged.sort_values('Date').reset_index(drop=True)
    df_merged.replace([np.inf, -np.inf], np.nan, inplace=True)
    df_merged.dropna(inplace=True)
    return df_merged

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_telegram_message(text: str):
    if not TELEGRAM_ENABLED:
        print("üì§ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID)")
        return False
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Dual Momentum ---
def get_and_send_signal():
    df = load_and_prepare_data()
    df = df.set_index('Date').sort_index()

    if len(df) < LOOKBACK + 1:
        msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Dual Momentum (–Ω—É–∂–Ω–æ ‚â•{LOOKBACK + 1} –¥–Ω–µ–π)"
        print(msg)
        send_telegram_message(msg)
        return

    risk_assets = ['GOLD', 'EQMX', 'OBLG']
    risk_free = 'LQDT'
    last_date = df.index[-1]

    mom = {}
    for asset in risk_assets + [risk_free]:
        price_today = df[f'Close_{asset}'].iloc[-1]
        price_past = df[f'Close_{asset}'].iloc[-(LOOKBACK + 1)]
        mom[asset] = price_today / price_past - 1

    eligible = [a for a in risk_assets if mom[a] > mom[risk_free]]
    selected = max(eligible, key=lambda x: mom[x]) if eligible else risk_free

    msg_lines = [
        f"üìä *Dual Momentum Signal*",
        f"–î–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {last_date.strftime('%Y-%m-%d')}",
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤–ª–æ–∂–∏—Ç—å 100% –≤ *{selected}*",
        "",
        "*–ú–æ–º–µ–Ω—Ç—É–º (6 –º–µ—Å):*"
    ]
    for a in risk_assets + [risk_free]:
        sign = "üü¢" if a == selected else ("üîµ" if a in eligible else "‚ö™Ô∏è")
        msg_lines.append(f"{sign} {a}: {mom[a]:+.2%}")

    message = "\n".join(msg_lines)

    print("\n" + "=" * 50)
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(message)
    print("=" * 50 + "\n")

    send_telegram_message(message)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    get_and_send_signal()
